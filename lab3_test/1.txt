#include "scanner.hpp"

using namespace std;

bool isID(const string &str)
{
  if(isdigit(str[0]))
    return false;
  int counter = 0;
  if(str[0] == '_')
    counter++;

  for(; counter < str.size(); counter++)
    if(!(isalnum(str[counter])))
      return false;

  return true;
}

bool isComment(const string &str)
{
  return str == "//";
}

//int isNumber(string str)
//{
//    vector<string> hexadecimal{"0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","A","B","C","D","E","F"};
//    int decimal_counter=0;
//    int hexadecimal_counter=0;
//    int dot_counter=0;
//    for (int i=0;i<str.size();i++)
//    {
//        if (isdigit(str[i]))
//        {
//            decimal_counter++;
//        }
//        else if (str[i]=='.')
//        {
//            dot_counter++;
//        }
//        else if (find(hexadecimal.begin(),hexadecimal.end(),str[i])!=hexadecimal.end())
//        {
//            hexadecimal_counter++;
//        }
//    }
//
//    if (decimal_counter==str.size())
//    {
//        return 1;
//    }
//    else if (hexadecimal_counter==str.size() && decimal_counter!=str.size())
//    {
//        return 2;
//    }
//    else if (decimal_counter==str.size()-1 && dot_counter==1)
//    {
//        return 3;
//    }
//    else
//        return 4;
//}
//
//bool isDecimal(const string &str)
//{
//    if (isNumber(str)==1)
//    {
//        return true;
//    }
//    else
//        return false;
//}
//
//bool isDouble(const string &str)
//{
//    if (isNumber(str)==2)
//    {
//        return true;
//    }
//    else
//        return false;
//}
//
//bool isHexadecimal(const string &str)
//{
//    if (isNumber(str)==3)
//    {
//        return true;
//    }
//    else
//        return false;
//}

bool isDigits(const string &str)
{
  return all_of(str.begin(), str.end(), ::isdigit);
}

//bool isDouble(const string &str)
//{
//    if (any_of(str.begin(), str.end(), "."))
//    {
//        
//    }
//}

bool isString(const string &str)
{
    return str[0] == '"' && str[str.size()-1] == '"';
}

bool isSymbol(const string &str)
{
    return str[0] == '\'' && str[str.size()-1]== '\'';
}

bool isBool(const string &str)
{
  return str == "true" || str == "false";
}

bool isLiteral(const string &str)
{
  return isString(str) || isBool(str);
}

bool isKeyword(const string &str)
{
  const vector<string> keywords{"auto","break","case","char","const","continue","default",
      "do","double","else","enum","extern","float","for","goto",
      "if","int","long","register","return","short","signed",
      "sizeof","static","struct","switch","typedef","union",
      "unsigned","void","volatile","while", "bool", "string","false","true"};
  for(const auto& keyword : keywords)
    if (keyword == str)
      return true;

  return false;
}

//bool isStatement(const string &str)
//{
//  const vector<string> statements{"for", "while"};
//  for(const auto& statement : statements)
//    if (statement == str)
//      return true;
//
//  return false;
//}

bool isOperator(const string &str)
{
  const vector<string> operators{ "<", ">", "<=", ">=", "*", "+", "-", "/", "=", "-=", "*=", "+=", "/=", "++", "--", "==", "&&", "||", "%", "!=", "!", "&", "^", ">>", "<<", "|", "%=", "&=", "^=", "|=", "<<=", ">>=", "->"};
  for(const auto& op : operators)
    if (op == str)
      return true;

  return false;
}

bool isSeparator(const string &str)
{
    const vector<string> Separators{"{", "}", ",", "(", ")", ";", "[", "]", ":"};
  for(const auto& separate : Separators)
    if (separate == str)
      return true;

  return false;
}

bool isNotLegal(const string &str)
{
  return str == " " || str == "\n";
}

void printRoleOfToken(const string& token)
{
  if(isOperator(token))
    cout << token << " -> " << "Оператор" <<endl;
  else if(isSeparator(token))
    cout << token << " -> " << "Розділовий знак" <<endl;
  else if(isKeyword(token))
    cout << token << " -> " << "Зарезервоване слово" <<endl;
//  else if(isStatement(token))
//    cout << token << " -> " << "Statement" <<endl;
  else if(isLiteral(token))
    cout << token << " -> " << "Рядкова константа" <<endl;
  else if(isSymbol(token))
    cout << token << " -> " << "Символьна константа" <<endl;
  else if(isID(token))
    cout << token << " -> " << "Ідентифікатор" <<endl;
    
//  else if(isNumber(token)==1)
//      cout << token <<" -> "<< "Десяткове число" <<endl;
//  else if(isNumber(token)==3)
//      cout << token <<" -> "<< "Число з плаваючою точкою" <<endl;
//  else if(isNumber(token)==2)
//      cout << token <<" -> "<< "Шіснадцяткове число" <<endl;
//
//  else if(isDecimal(token))
//    cout << token <<" -> "<< "Десяткове число" <<endl;
//  else if(isDouble(token))
//    cout << token <<" -> "<< "Число з плаваючою точкою" <<endl;
//  else if(isHexadecimal(token))
//    cout << token <<" -> "<< "Шіснадцяткове число" <<endl;
    
  else if(isDigits(token))
    cout << token <<" -> "<< "Десяткове число" <<endl;
//  else if(isComment(token))
//    cout << token << " -> " << "Comment" <<endl;
//  else
//    throw runtime_error(token);
}

void lexicalAnalyze(const string &nameOfFile)
{
  char ch;
  string buffer;
  fstream file(nameOfFile, fstream::in);

  if (!file.is_open())
  {
    cout << "Error while opening the file\n";
    exit(0);
  }

//  bool miltiCm = false, singleCm = false;
  while (file >> noskipws >> ch)
  {
      
//    if(singleCm || miltiCm)
//    {
//      if(singleCm && ch == '\n')
//        singleCm = false;
//
//      if(miltiCm && ch == '*') // && ch == '*'
//      {
//        file >> ch;
//
//        if(ch == EOF)
//          break;
//
//        if(ch == '/')
//          miltiCm = false;
//      }
//      continue;
//    }
//
//    if(ch == '/')
//    {
//      string comm(1, ch);
//      file >> ch;
//      if(ch == EOF)
//      {
//        printRoleOfToken(comm);
//        break;
//      }
//
//      if(ch == '*')
//      {
//        miltiCm = true;
//        comm += ch;
//      }
//
//      if(ch == '/')
//      {
//        singleCm = true;
//        comm += ch;
//      }
//      if(miltiCm || singleCm)
//      {
//        printRoleOfToken(comm);
//        continue;
//      }
//    }

      
    if(isNotLegal(string(1, ch)))
    {
      if(!buffer.empty())
      {
        printRoleOfToken(buffer);
        buffer = "";
      }
      continue;
    }

    if(isOperator(string(1, ch)) && !isOperator(buffer))
    {
      if(!buffer.empty())
      {
        printRoleOfToken(buffer);
        buffer = "";
      }
    }

    if(!isOperator(string(1, ch)) && isOperator(buffer))
    {
      printRoleOfToken(buffer);
      buffer = "";
    }

    if(isSeparator(string(1, ch)))
    {
      if(!buffer.empty())
      {
        printRoleOfToken(buffer);
        buffer = "";
      }
      if(isSeparator(string(1, ch)))
      {
        printRoleOfToken(string(1, ch));
        continue;
      }
    }
      
    buffer += ch;
  }
  file.close();
}
